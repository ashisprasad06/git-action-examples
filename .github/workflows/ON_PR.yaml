name: ON PR
on:
  pull_request:
    branches:
      - main
    paths:
      - 'update/**'
      - 'changelog.xml'
      - 'pre-deploy/**'
      - 'post-deploy/**'

jobs:
  pr_on_main_branch:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: create preprod branch
        id: create_preprod_branch
        run : |
          SOURCE_BRANCH_NAME=${GITHUB_HEAD_REF}
          JIRA_TICKET_NUMBER=$(echo $branch_name | awk -F"/" '{print $2}')
          RELEASE_BRANCH_NAME="preprod/$(echo $JIRA_TICKET_NUMBER)"
          echo "::set-output name=preprod_branch::$RELEASE_BRANCH_NAME"
          echo "Checking $RELEASE_BRANCH_NAME existing or not"
          if [ $(git ls-remote --heads origin $RELEASE_BRANCH_NAME|wc -l) == 0 ];
            then
                echo "The release branch $RELEASE_BRANCH_NAME does not exists in remote. Hence creating the new branch from master"
                git fetch
                git checkout -b $RELEASE_BRANCH_NAME origin/main
                git push origin $RELEASE_BRANCH_NAME
                echo "The new branch has been created. Please raise PR against this branch to merge changes to Pre-Prod"
          fi
      - name: merge feature to preprod
        run: |
          git checkout ${{ steps.create_preprod_branch.outputs.preprod_branch }}
          git pull
          git merge --no-ff --no-commit ${GITHUB_HEAD_REF}
          if [[ $? -ne 0 ]];
            then
                echo "the ${GITHUB_HEAD_REF} branch cannot be auto merged to ${{ create_preprod_branch.outputs.preprod_branch }}
                exit 1
          else
            git merge ${GITHUB_HEAD_REF}
            git push origin ${{ steps.create_preprod_branch.outputs.preprod_branch }}
          fi
      - name: List of changed files
        id: changed_files
        run: |
          echo "List of the changed files"
          git diff --name-only origin/main ${GITHUB_HEAD_REF}
          git diff --name-only origin/main ${GITHUB_HEAD_REF} > files.txt
          list_of_files=`cat files.txt|tr '\n' ' '`
          echo "::set-output name=changed_files::$list_of_files"
      - name: check database harcoding
        run: |
          for file in ${{ steps.changed_files.outputs.changed_files }}
            do
              Pattern_1=$(egrep -ic '[a-z0-9_-]+\.[a-z0-9_-]+\.[a-z0-9_-]' $file)
              Pattern_2=$(egrep -ic 'use database' $file)

              if [ $Pattern_1 -ne 0 || $Pattern_2 -ne 0 ];
                then
                    echo "Found Traces of database hardcoding in the script $file. Hence failing the check"
                    exit 1
              fi
            done
      - name: check pre-deploy script
        run: |
          for file in ${{ steps.changed_files.outputs.changed_files }}
            do
              Pattern=$(cat file_2.txt|tr -d "\n"|egrep -ic 'DELETE FROM (.+)LIQUIBASE(.+)')
              if [ $Pattern_1 -ne 0 || $Pattern_2 -ne 0 ];
                then
                    echo "Found Traces of liquidbase deletion in $file. Hence failing the check"
                    exit 1
              fi
            done

